import os
import aiohttp

conditions = {'clear': '—è—Å–Ω–æ', 'partly-cloudy': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', 'cloudy': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
              'overcast': '–ø–∞—Å–º—É—Ä–Ω–æ', 'drizzle': '–º–æ—Ä–æ—Å—å', 'light-rain': '–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
              'rain': '–¥–æ–∂–¥—å', 'moderate-rain': '—É–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π', 'heavy-rain': '—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
              'continuous-heavy-rain': '–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'showers': '–ª–∏–≤–µ–Ω—å',
              'wet-snow': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º', 'light-snow': '–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', 'snow': '—Å–Ω–µ–≥',
              'snow-showers': '—Å–Ω–µ–≥–æ–ø–∞–¥', 'hail': '–≥—Ä–∞–¥', 'thunderstorm': '–≥—Ä–æ–∑–∞',
              'thunderstorm-with-rain': '–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π', 'thunderstorm-with-hail': '–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º'
              }
wind_dirs = {'nw': '–°–ó', 'n': '–°', 'ne': '–°–í', 'e': '–í',
             'se': '–Æ–í', 's': '–Æ', 'sw': '–Æ–ó', 'w': '–ó', '—Å': '—à—Ç–∏–ª—å'}
type_prec = {'0': '–±–µ–∑ –æ—Å–∞–¥–∫–æ–≤', '1': '–¥–æ–∂–¥—å', '2': '–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º', '3': '—Å–Ω–µ–≥', '4': '–≥—Ä–∞–¥'}
clowness = {'0': '—è—Å–Ω–æ', '0.25': '–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', '0.5': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏', '0.75': '–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
            '1': '–ø–∞—Å–º—É—Ä–Ω–æ'}
CONDITION_TO_SMILE = {
    'clear': '‚òÄÔ∏è', 'partly-cloudy': '‚õÖ', 'cloudy': '‚õÖ',
    'overcast': '‚òÅÔ∏è', 'drizzle': 'üåß', 'light-rain': 'üåß', 'rain': 'üåß',
    'moderate-rain': 'üåß', 'heavy-rain': 'üåß', 'continuous-heavy-rain': 'üåß',
    'showers': 'üåß', 'wet-snow': '‚ùÑÔ∏è', 'light-snow': '‚ùÑÔ∏è', 'snow': '‚ùÑÔ∏è',
    'snow-showers': '‚ùÑÔ∏è', 'hail': 'üåß', 'thunderstorm': '‚ö°',
    'thunderstorm-with-rain': '‚õà', 'thunderstorm-with-hail': '‚õà'
}

WEATHER_API_URL = "https://api.weather.yandex.ru/v2/forecast"


def get_today_weather(dan):
    s = ''
    b = {}
    b['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'] = dan['temp']
    s = dan['condition']
    b['–æ—Å–∞–¥–∫–∏'] = conditions[s]
    b['—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞'] = dan['wind_speed']
    s = dan['wind_dir']
    b['–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞'] = wind_dirs[s]
    b['–≤–ª–∞–∂–Ω–æ—Å—Ç—å'] = dan['humidity']
    s = dan['prec_type']
    b['—Ç–∏–ø –æ—Å–∞–¥–∫–æ–≤'] = type_prec[str(s)]
    s = dan['cloudness']
    b['—è—Å–Ω–æ—Å—Ç—å'] = str(clowness[str(s)])
    b['–¥–∞–≤–ª–µ–Ω–∏–µ'] = dan['pressure_mm']
    b['—Å–º–∞–π–ª'] = CONDITION_TO_SMILE[dan['condition']]
    return b


def obr_forecasts(dan):
    A = []
    for i in range(len(dan)):
        b = {}
        b['–¥–∞—Ç–∞'] = dan[i]['date']
        b['—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'] = dan[i]['parts']['day_short']['feels_like']
        s = dan[i]['parts']['day_short']['condition']
        b['—Å–º–∞–π–ª'] = CONDITION_TO_SMILE[s]
        b['–æ—Å–∞–¥–∫–∏'] = conditions[s]
        b['—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞'] = dan[i]['parts']['day_short']['wind_speed']
        s = dan[i]['parts']['day_short']['wind_dir']
        b['–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞'] = wind_dirs[s]
        b['–≤–ª–∞–∂–Ω–æ—Å—Ç—å'] = dan[i]['parts']['day_short']['humidity']
        s = dan[i]['parts']['day_short']['prec_type']
        b['—Ç–∏–ø –æ—Å–∞–¥–∫–æ–≤'] = type_prec[str(s)]
        s = dan[i]['parts']['day_short']['cloudness']
        b['—è—Å–Ω–æ—Å—Ç—å'] = str(clowness[str(s)])
        b['–¥–∞–≤–ª–µ–Ω–∏–µ'] = dan[i]['parts']['day_short']['pressure_mm']
        A.append(b)
    return A


async def get_weather(latitude, longitude, dayf):
    token = os.getenv('WEATHER_APIKEY')
    if dayf == 1:
        async with aiohttp.ClientSession() as session:
            async with session.get(WEATHER_API_URL,
                                   params={'lat': latitude, 'lon': longitude, 'lang': 'ru_RU'},
                                   headers={'X-Yandex-API-Key': token}) as response:
                response = await response.json()
                return get_today_weather(response['fact'])
    else:
        async with aiohttp.ClientSession() as session:
            async with session.get(WEATHER_API_URL,
                                   params={'lat': latitude, 'lon': longitude, 'lang': 'ru_RU', 'limit': dayf},
                                   headers={'X-Yandex-API-Key': token}) as response:
                response = await response.json()
                return obr_forecasts(response['forecasts'])
